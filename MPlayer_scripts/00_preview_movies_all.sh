#!/bin/bash 

# ##### BEGIN GPL LICENSE BLOCK #####
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####


# Author: qazav_szaszak - qazav3.0@gmail.com

# Description
# This script generates a preview of all the sequence (all frames in the 
# folder) at 1/2 movie original resolution and 1/2 original FPS to check its 
# colors after alterations made with UFRaw. You should use it in case you want
# to check the colors of the whole scene, because it may not be so fast. Since
# this script will process all files in the folder, it is convenient to use
# the "00_just_watch.sh" in case you just want to review the scene, rather than
# reprocessing all the DNG files.

# Check http://szaszak.wordpress.com/digital_cinema_automation
# for more information on how the recording workflow has been thought for
# the movie 'Floresta Vermelha' (Red Forest) - http://florestavermelha.org


######### SCRIPT VARIABLES
### GENERAL VARIABLES
SELECTED_FILE=`ls -t *.ufraw | head -1`; # uses last altered .ufraw file in folder
DNGS_IN_FOLDER=(`ls | grep ".dng" | sort`);
BASE_NAME=`echo $SELECTED_FILE | cut -d "." -f 1`;
BASE_FRAME=`echo $SELECTED_FILE | tr "-" "\n" | egrep "[0-9]{6}.ufraw" | cut -d "." -f 1 | bc`;
BKP_FILE="$SELECTED_FILE""e";

### MOVIE ATTRIBUTES
# These files have been generated by the Editing scripts - check links above for info.
MOVIE_FPS=`cat .*.fps | cut -d "." -f 1`;
MOVIE_WIDTH=`cat .*.size | cut -d "x" -f 1`;
MOVIE_HEIGTH=`cat .*.size | cut -d "x" -f 2`;

### PREVIEW VARIABLES
SHRINK="2";
PREVIEW_FPS="$((MOVIE_FPS/2))";
PREVIEW_WIDTH="$((MOVIE_WIDTH/SHRINK*2))";
PREVIEW_HEIGTH="$((MOVIE_HEIGTH/SHRINK*2))";


######### Part 1: Change the UFRAW reference file
######### Changes the .ufraw reference file so that
######### it won't create other reference files.
######### Also, creates a backup of the original one.

CREATE_ID=`cat $SELECTED_FILE | grep "\<CreateID" | cut -d ">" -f 2 | cut -d "<" -f 1`;

sed -ie 's/<CreateID>2/<CreateID>0/g' $SELECTED_FILE; 
sed -ie 's/<CreateID>1/<CreateID>0/g' $SELECTED_FILE; 


######### Part 2: The position of the reference file
######### Finds out the position of our .ufraw reference file
######### so that we can create a preview movie based on it.

for k in ${DNGS_IN_FOLDER[@]}; do
	let INDEX=$((INDEX+1))
		if [ "$k" == `echo "$BASE_NAME.dng"` ] ; then
		FRAME_POSITION="$INDEX";
		fi
	done;


######### Part 3: The frames that will be previewed
######### Uses the .ufraw file position and presents
######### the exact range of JPGs that will be used.
######### We'll use 1s before it and 1s after it.
######### Annouces the range that will be used.

START_FRAME="1"
END_FRAME=`ls *.dng | wc -l`;


echo "Creating preview movie...";
echo "Base frame = $BASE_FRAME... FPS = $MOVIE_FPS"
echo "Using frames $START_FRAME to $END_FRAME @ $PREVIEW_FPS""fps.";


######### Part 4: The effective array
######### The human-announced range differs from the
######### computer-readable one, which is based on
######### the .ufraw file position in the folder.
######### This creates an array with the DNGs that
######### will be transcodified to JPG.

rm *.jpg;

COUNTER="0";
for ((i="0"; i<="$END_FRAME"; i="$((i+2))" )) do
	USED_DNGS_ARRAY[$COUNTER]=${DNGS_IN_FOLDER[i]}
	COUNTER="$((COUNTER+1))";
	done;

DNGS_FOR_TRANSCODING=`echo ${USED_DNGS_ARRAY[@]} | tr " " "\n"`

######### Part 5: Transcoding
######### Transcodes the DNGs in the array to JPG.

echo "$DNGS_FOR_TRANSCODING" | parallel -j +0 ufraw-batch --conf=$SELECTED_FILE --out-type=jpg --compression=100 --out-depth=8 --shrink=$SHRINK --noexif --silent --rotate 180 --overwrite {} 

######### Part 6: Previewing
######### Uses MPlayer to preview the resulting
######### JPG sequence at half the original FPS.

mplayer "mf://*.jpg" -fs -mf fps=$PREVIEW_FPS:type=jpg -brightness 0 -vf dsize=$PREVIEW_WIDTH:$PREVIEW_HEIGTH;

######### Part 7: Restores the original .ufraw file

sed -ie 's/<CreateID>0/<CreateID>'$CREATE_ID'/g' $SELECTED_FILE; 
if [ -f $BKP_FILE ]; then rm $BKP_FILE; fi;


######### End of the script.
